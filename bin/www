// load environment configs
let {env} = require('../config/config.js');

/**
 * Module dependencies.
 */

let app = require('../main');
let debug = require('debug')('vincentsordo:server');
let http = require('http');


/**
 * Get port from environment and store in Express.
 */

let httpPort = normalizePort(process.env.PORT || '3000');
app.set('port', httpPort);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(httpPort, () => {
	console.log(`[${env.toUpperCase()}] Started server on port ${httpPort}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = 'Port ' + httpPort;
	if (typeof port === 'string') {
		bind = 'Pipe ' + httpPort;
	}

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	let addr = server.address();
	let bind = 'port ' + addr.port;
	if (typeof addr === 'string') {
		bind = 'pipe ' + addr;
	}
	debug('Listening on ' + bind);
}
